// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Winnosuke.Models;

#nullable disable

namespace test_2.Migrations
{
    [DbContext(typeof(MyGarageFinalContext))]
    [Migration("20250608201554_AddImageUrlToService")]
    partial class AddImageUrlToService
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("test_2.Models.AdminActivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActivityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("ActionType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ActivityId")
                        .HasName("PK__AdminAct__45F4A7F1428348E4");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminActivities");
                });

            modelBuilder.Entity("test_2.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime?>("AppointmentTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("GarageId")
                        .HasColumnType("int")
                        .HasColumnName("GarageID");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointm__8ECDFCA2221F534A");

                    b.HasIndex("GarageId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("test_2.Models.Garage", b =>
                {
                    b.Property<int>("GarageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GarageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GarageId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OperatingArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GarageId")
                        .HasName("PK__Garages__5D8BEEB1FF3115B3");

                    b.ToTable("Garages");
                });

            modelBuilder.Entity("test_2.Models.GarageSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScheduleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("GarageId")
                        .HasColumnType("int")
                        .HasColumnName("GarageID");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time");

                    b.HasKey("ScheduleId")
                        .HasName("PK__GarageSc__9C8A5B690D2A35B7");

                    b.HasIndex("GarageId");

                    b.ToTable("GarageSchedules");
                });

            modelBuilder.Entity("test_2.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32DE412EF6");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("test_2.Models.RepairStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatusStep")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StatusId")
                        .HasName("PK__RepairSt__C8EE2043CE0D7330");

                    b.HasIndex("AppointmentId");

                    b.ToTable("RepairStatus", (string)null);
                });

            modelBuilder.Entity("test_2.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("GarageId")
                        .HasColumnType("int")
                        .HasColumnName("GarageID");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79AE3419A5AC");

                    b.HasIndex("GarageId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("test_2.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("GarageId")
                        .HasColumnType("int")
                        .HasColumnName("GarageID");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceId")
                        .HasName("PK__Services__C51BB0EA81D78BEA");

                    b.HasIndex("GarageId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("test_2.Models.TechnicalReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PerformedItems")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Recommendations")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicianID");

                    b.Property<string>("VehicleStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ReportId")
                        .HasName("PK__Technica__D5BD48E5EA433717");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("TechnicalReports");
                });

            modelBuilder.Entity("test_2.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC4A2D9ED3");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E4B2020C26")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("test_2.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VehicleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Make")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId")
                        .HasName("PK__Vehicles__476B54B285DEB84B");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("test_2.Models.AdminActivity", b =>
                {
                    b.HasOne("test_2.Models.User", "Admin")
                        .WithMany("AdminActivities")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FK__AdminActi__Admin__4BAC3F29");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("test_2.Models.Appointment", b =>
                {
                    b.HasOne("test_2.Models.Garage", "Garage")
                        .WithMany("Appointments")
                        .HasForeignKey("GarageId")
                        .HasConstraintName("FK__Appointme__Garag__32E0915F");

                    b.HasOne("test_2.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Appointme__Servi__33D4B598");

                    b.HasOne("test_2.Models.User", "Technician")
                        .WithMany("AppointmentTechnicians")
                        .HasForeignKey("TechnicianId")
                        .HasConstraintName("FK__Appointme__Techn__34C8D9D1");

                    b.HasOne("test_2.Models.User", "User")
                        .WithMany("AppointmentUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Appointme__UserI__30F848ED");

                    b.HasOne("test_2.Models.Vehicle", "Vehicle")
                        .WithMany("Appointments")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("FK__Appointme__Vehic__31EC6D26");

                    b.Navigation("Garage");

                    b.Navigation("Service");

                    b.Navigation("Technician");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("test_2.Models.GarageSchedule", b =>
                {
                    b.HasOne("test_2.Models.Garage", "Garage")
                        .WithMany("GarageSchedules")
                        .HasForeignKey("GarageId")
                        .HasConstraintName("FK__GarageSch__Garag__4F7CD00D");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("test_2.Models.Notification", b =>
                {
                    b.HasOne("test_2.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notificat__UserI__4222D4EF");

                    b.Navigation("User");
                });

            modelBuilder.Entity("test_2.Models.RepairStatus", b =>
                {
                    b.HasOne("test_2.Models.Appointment", "Appointment")
                        .WithMany("RepairStatuses")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__RepairSta__Appoi__38996AB5");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("test_2.Models.Review", b =>
                {
                    b.HasOne("test_2.Models.Garage", "Garage")
                        .WithMany("Reviews")
                        .HasForeignKey("GarageId")
                        .HasConstraintName("FK__Reviews__GarageI__3D5E1FD2");

                    b.HasOne("test_2.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Reviews__UserID__3C69FB99");

                    b.Navigation("Garage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("test_2.Models.Service", b =>
                {
                    b.HasOne("test_2.Models.Garage", "Garage")
                        .WithMany("Services")
                        .HasForeignKey("GarageId")
                        .HasConstraintName("FK__Services__Garage__2E1BDC42");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("test_2.Models.TechnicalReport", b =>
                {
                    b.HasOne("test_2.Models.Appointment", "Appointment")
                        .WithMany("TechnicalReports")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__Technical__Appoi__46E78A0C");

                    b.HasOne("test_2.Models.User", "Technician")
                        .WithMany("TechnicalReports")
                        .HasForeignKey("TechnicianId")
                        .HasConstraintName("FK__Technical__Techn__47DBAE45");

                    b.Navigation("Appointment");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("test_2.Models.Vehicle", b =>
                {
                    b.HasOne("test_2.Models.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Vehicles__UserID__29572725");

                    b.Navigation("User");
                });

            modelBuilder.Entity("test_2.Models.Appointment", b =>
                {
                    b.Navigation("RepairStatuses");

                    b.Navigation("TechnicalReports");
                });

            modelBuilder.Entity("test_2.Models.Garage", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("GarageSchedules");

                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("test_2.Models.Service", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("test_2.Models.User", b =>
                {
                    b.Navigation("AdminActivities");

                    b.Navigation("AppointmentTechnicians");

                    b.Navigation("AppointmentUsers");

                    b.Navigation("Notifications");

                    b.Navigation("Reviews");

                    b.Navigation("TechnicalReports");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("test_2.Models.Vehicle", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
